import 'dart:math';
import '../models/player.dart';
import '../models/match.dart';

class MatchmakingService {
  final Map<String, Player> _playersInQueue = {};
  final Map<String, Match> _pendingMatches = {};
  final List<Match> _completedMatches = [];

  final Random _random = Random();
  int _totalMatches = 0;

  /// –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  bool addToQueue(Player player) {
    if (_playersInQueue.containsKey(player.id)) {
      return false; // –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
    }

    if (player.inBattle) {
      return false; // –ò–≥—Ä–æ–∫ —É–∂–µ –≤ –±–æ—é
    }

    _playersInQueue[player.id] = player.copyWith(lastActive: DateTime.now());
    print('‚ûï –ò–≥—Ä–æ–∫ ${player.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–≤—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${_playersInQueue.length})');
    return true;
  }

  /// –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
  bool removeFromQueue(String playerId) {
    final removed = _playersInQueue.remove(playerId);
    if (removed != null) {
      print('‚ûñ –ò–≥—Ä–æ–∫ ${removed.name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏');
      return true;
    }
    return false;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
  int getQueueSize() {
    return _playersInQueue.length;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
  int getTotalMatches() {
    return _totalMatches;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
  List<Player> getPlayersInQueue() {
    return _playersInQueue.values.toList();
  }

  /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –º–∞—Ç—á–∏
  List<Match> processPendingMatches() {
    final newMatches = <Match>[];

    // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç)
    _removeInactivePlayers();

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏ –µ—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞
    while (_playersInQueue.length >= 2) {
      final match = _createMatch();
      if (match != null) {
        newMatches.add(match);
        _pendingMatches[match.id] = match;
        _totalMatches++;
      } else {
        break; // –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ç—á
      }
    }

    return newMatches;
  }

  /// –°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏
  Match? _createMatch() {
    if (_playersInQueue.length < 2) return null;

    final players = _playersInQueue.values.toList();

    // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
    // –í –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å, —Ä–µ–π—Ç–∏–Ω–≥ –∏ —Ç.–¥.
    final player1 = players[0];
    final player2 = players[1];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
    if (!_arePlayersCompatible(player1, player2)) {
      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏—Ö
      if (players.length > 2) {
        final player3 = players[2];
        if (_arePlayersCompatible(player1, player3)) {
          return _createMatchBetween(player1, player3);
        } else if (_arePlayersCompatible(player2, player3)) {
          return _createMatchBetween(player2, player3);
        }
      }
      return null;
    }

    return _createMatchBetween(player1, player2);
  }

  /// –°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á –º–µ–∂–¥—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
  Match _createMatchBetween(Player player1, Player player2) {
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    _playersInQueue.remove(player1.id);
    _playersInQueue.remove(player2.id);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á
    final matchId = _generateMatchId();
    final match = Match(
      id: matchId,
      player1Id: player1.id,
      player2Id: player2.id,
      player1Data: player1,
      player2Data: player2,
    );

    print('üéÆ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á: ${player1.name} vs ${player2.name} (ID: $matchId)');
    return match;
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
  bool _arePlayersCompatible(Player player1, Player player2) {
    // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:

    // 1. –†–∞–∑–Ω–∏—Ü–∞ –≤ —É—Ä–æ–≤–Ω—è—Ö –Ω–µ –±–æ–ª–µ–µ 3
    const maxLevelDifference = 3;
    if ((player1.level - player2.level).abs() > maxLevelDifference) {
      return false;
    }

    // 2. –û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –≤ –±–æ—é
    if (player1.inBattle || player2.inBattle) {
      return false;
    }

    // 3. –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å–∞–º–æ–º—É —Å —Å–æ–±–æ–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (player1.id == player2.id) {
      return false;
    }

    return true;
  }

  /// –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  void _removeInactivePlayers() {
    final now = DateTime.now();
    const inactivityThreshold = Duration(minutes: 2);

    final inactivePlayers = _playersInQueue.entries
        .where((entry) => now.difference(entry.value.lastActive) > inactivityThreshold)
        .map((entry) => entry.key)
        .toList();

    for (final playerId in inactivePlayers) {
      final player = _playersInQueue.remove(playerId);
      if (player != null) {
        print('‚è∞ –ò–≥—Ä–æ–∫ ${player.name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
      }
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á –ø–æ ID
  Match? getMatch(String matchId) {
    return _pendingMatches[matchId];
  }

  /// –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á
  void finishMatch(String matchId, String? winnerId) {
    final match = _pendingMatches.remove(matchId);
    if (match != null) {
      final finishedMatch = match.copyWith(
        status: MatchStatus.finished,
        winnerId: winnerId,
        finishedAt: DateTime.now(),
      );
      _completedMatches.add(finishedMatch);

      print('üèÅ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω: ${match.player1Data.name} vs ${match.player2Data.name}, '
          '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${winnerId ?? "–Ω–∏—á—å—è"}');
    }
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –º–∞—Ç—á
  void cancelMatch(String matchId, String reason) {
    final match = _pendingMatches.remove(matchId);
    if (match != null) {
      final cancelledMatch = match.copyWith(
        status: MatchStatus.cancelled,
        finishedAt: DateTime.now(),
      );
      _completedMatches.add(cancelledMatch);

      print('‚ùå –ú–∞—Ç—á –æ—Ç–º–µ–Ω–µ–Ω: ${match.player1Data.name} vs ${match.player2Data.name}, '
          '–ø—Ä–∏—á–∏–Ω–∞: $reason');
    }
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
  bool updatePlayerInQueue(String playerId, Player updatedPlayer) {
    if (_playersInQueue.containsKey(playerId)) {
      _playersInQueue[playerId] = updatedPlayer.copyWith(lastActive: DateTime.now());
      return true;
    }
    return false;
  }

  /// –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
  Player? findPlayerInQueue(String playerId) {
    return _playersInQueue[playerId];
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞
  Map<String, dynamic> getStatistics() {
    final queueLevels = <int, int>{};
    for (final player in _playersInQueue.values) {
      queueLevels[player.level] = (queueLevels[player.level] ?? 0) + 1;
    }

    return {
      'playersInQueue': _playersInQueue.length,
      'pendingMatches': _pendingMatches.length,
      'completedMatches': _completedMatches.length,
      'totalMatches': _totalMatches,
      'queueLevelDistribution': queueLevels,
      'averageWaitTime': _calculateAverageWaitTime(),
    };
  }

  /// –í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
  double _calculateAverageWaitTime() {
    if (_playersInQueue.isEmpty) return 0.0;

    final now = DateTime.now();
    final totalWaitTime = _playersInQueue.values
        .map((player) => now.difference(player.lastActive).inSeconds)
        .reduce((a, b) => a + b);

    return totalWaitTime / _playersInQueue.length;
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –º–∞—Ç—á–∞
  String _generateMatchId() {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final randomPart = _random.nextInt(10000).toString().padLeft(4, '0');
    return 'match_${timestamp}_$randomPart';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
  List<Match> getCompletedMatches({int limit = 100}) {
    final matches = _completedMatches.reversed.toList();
    return matches.take(limit).toList();
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
  void cleanupOldMatches() {
    final now = DateTime.now();
    const keepDuration = Duration(hours: 24);

    _completedMatches.removeWhere((match) {
      return match.finishedAt != null &&
          now.difference(match.finishedAt!) > keepDuration;
    });
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  void reset() {
    _playersInQueue.clear();
    _pendingMatches.clear();
    _completedMatches.clear();
    _totalMatches = 0;
  }
}